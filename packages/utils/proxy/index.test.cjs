"use strict";

var _proxy = require("./proxy.js");
describe('ObjectProxy', () => {
  it('should toJSON on simple object', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {
        k2: 'test'
      }
    });
    expect(o1.toJSON()).toEqual({
      k1: {
        k2: 'test'
      }
    });
  });
  it('should toJSON on inherited objects', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {
        k2: 'test'
      }
    });
    const o2 = _proxy.ObjectProxy.create({}, o1);
    expect(o2.toJSON()).toEqual({
      k1: {
        k2: 'test'
      }
    });
  });
  it('should deep merge toJSON', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {
        k2: 'test'
      },
      k2: {
        k3: 'test'
      }
    });
    const o2 = _proxy.ObjectProxy.create({
      k1: {
        k2: {
          k3: 'test'
        }
      }
    }, o1);
    const o3 = _proxy.ObjectProxy.create({
      k1: {
        k2: {
          k3: ['v1', 'v2']
        }
      }
    }, o2);
    const o4 = _proxy.ObjectProxy.create({
      k1: {
        k2: {
          k3: {
            k4: 'test'
          }
        }
      }
    }, o3);
    expect(o2.toJSON()).toEqual({
      k1: {
        k2: {
          k3: 'test'
        }
      },
      k2: {
        k3: 'test'
      }
    });
    expect(o3.toJSON()).toEqual({
      k1: {
        k2: {
          k3: ['v1', 'v2']
        }
      },
      k2: {
        k3: 'test'
      }
    });
    expect(o4.toJSON()).toEqual({
      k1: {
        k2: {
          k3: {
            k4: 'test'
          }
        }
      },
      k2: {
        k3: 'test'
      }
    });
    expect(o3.toJSON()).toEqual({
      k1: {
        k2: {
          k3: ['v1', 'v2']
        }
      },
      k2: {
        k3: 'test'
      }
    });
    expect(o2.toJSON()).toEqual({
      k1: {
        k2: {
          k3: 'test'
        }
      },
      k2: {
        k3: 'test'
      }
    });
  });
  it('should inherit values', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {}
    });
    const o2 = _proxy.ObjectProxy.create({
      k1: {
        k2: ['test']
      }
    }, o1);
    const o3 = _proxy.ObjectProxy.create({
      k1: {}
    }, o2);
    const o4 = _proxy.ObjectProxy.create({
      k1: {
        k2: null
      }
    }, o3);
    const o5 = _proxy.ObjectProxy.create({
      k1: {
        k2: undefined
      }
    }, o4);
    expect(o5.k1.k2).toBeNull();
    expect(o4.k1.k2).toBeNull();
    expect(o3.k1.k2).toEqual(['test']);
    expect(o2.k1.k2).toEqual(['test']);
    expect(o1.k1.k2).toBeUndefined();
  });
  it('should set a value on proxy at root', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {}
    });
    const o2 = _proxy.ObjectProxy.create({}, o1);
    o2.k1.k2 = 'test';
    expect(o1.k1).toEqual({});
    expect(o2.k1.k2).toEqual('test');
    expect(o2.k1).toEqual({
      k2: 'test'
    });
  });
  it('should set a value on proxy at subobject', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {}
    });
    const o2 = _proxy.ObjectProxy.create({
      k1: {}
    }, o1);
    o2.k1.k2 = 'test';
    expect(o1.k1).toEqual({});
    expect(Object.keys(o2)).toEqual(['k1']);
    expect(Object.keys(o2.k1)).toEqual(['k2']);
    expect(o2.k1.k2).toEqual('test');
    expect(o2.k1).toEqual({
      k2: 'test'
    });
  });
  it('should set a value on object at root', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {}
    });
    const o2 = _proxy.ObjectProxy.create({}, o1);
    o2.k1.k2 = 'test';
    expect(_proxy.ObjectProxy.get(o1)).toEqual({
      k1: {}
    });
    expect(_proxy.ObjectProxy.get(o2)).toEqual({
      k1: {
        k2: 'test'
      }
    });
  });
  it('should set a value on object at subobject', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {}
    });
    const o2 = _proxy.ObjectProxy.create({
      k1: {}
    }, o1);
    o2.k1.k2 = 'test';
    expect(_proxy.ObjectProxy.get(o1)).toEqual({
      k1: {}
    });
    expect(_proxy.ObjectProxy.get(o2)).toEqual({
      k1: {
        k2: 'test'
      }
    });
  });
  it('should get subobject value from child', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {}
    });
    const o2 = _proxy.ObjectProxy.create({
      k1: {}
    }, o1);
    o2.k1.k2 = 'test';
    expect(_proxy.ObjectProxy.get(o1)).toEqual({
      k1: {}
    });
    o1.k1.k3 = 'test2';
    expect(_proxy.ObjectProxy.get(o1.k1)).toEqual({
      k3: 'test2'
    });
    expect(_proxy.ObjectProxy.get(o2.k1)).toEqual({
      k2: 'test'
    });
  });
  it('should perform toJSON on child', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {
        k2: 'test'
      }
    });
    const o2 = _proxy.ObjectProxy.create({
      k1: {}
    }, o1);
    expect(o2.toJSON()).toEqual({
      k1: {
        k2: 'test'
      }
    });
    expect(o2.k1.toJSON()).toEqual({
      k2: 'test'
    });
    o2.k1.k3 = 'test2';
    expect(o2.toJSON()).toEqual({
      k1: {
        k2: 'test',
        k3: 'test2'
      }
    });
    expect(o2.k1.toJSON()).toEqual({
      k2: 'test',
      k3: 'test2'
    });
  });
  it('should delete', () => {
    const o1 = _proxy.ObjectProxy.create({
      k1: {}
    });
    const o2 = _proxy.ObjectProxy.create({
      k1: {
        k2: ['test']
      }
    }, o1);
    const o3 = _proxy.ObjectProxy.create({
      k1: {}
    }, o2);
    const o4 = _proxy.ObjectProxy.create({
      k1: {
        k2: null
      }
    }, o3);
    const o5 = _proxy.ObjectProxy.create({
      k1: {
        k2: undefined
      }
    }, o4);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwibzEiLCJPYmplY3RQcm94eSIsImNyZWF0ZSIsImsxIiwiazIiLCJleHBlY3QiLCJ0b0pTT04iLCJ0b0VxdWFsIiwibzIiLCJrMyIsIm8zIiwibzQiLCJrNCIsIm81IiwidW5kZWZpbmVkIiwidG9CZU51bGwiLCJ0b0JlVW5kZWZpbmVkIiwiT2JqZWN0Iiwia2V5cyIsImdldCJdLCJzb3VyY2VzIjpbInNyYy9pbmRleC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9iamVjdFByb3h5IH0gZnJvbSAnLi9wcm94eS5qcyc7XG5cbmRlc2NyaWJlKCdPYmplY3RQcm94eScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCB0b0pTT04gb24gc2ltcGxlIG9iamVjdCcsICgpID0+IHtcbiAgICBjb25zdCBvMSA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7IGsyOiAndGVzdCcgfSB9KTtcblxuICAgIGV4cGVjdChvMS50b0pTT04oKSkudG9FcXVhbCh7IGsxOiB7IGsyOiAndGVzdCcgfSB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0b0pTT04gb24gaW5oZXJpdGVkIG9iamVjdHMnLCAoKSA9PiB7XG4gICAgY29uc3QgbzEgPSBPYmplY3RQcm94eS5jcmVhdGUoeyBrMTogeyBrMjogJ3Rlc3QnIH0gfSk7XG4gICAgY29uc3QgbzIgPSBPYmplY3RQcm94eS5jcmVhdGUoe30sIG8xKTtcblxuICAgIGV4cGVjdChvMi50b0pTT04oKSkudG9FcXVhbCh7IGsxOiB7IGsyOiAndGVzdCcgfSB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkZWVwIG1lcmdlIHRvSlNPTicsICgpID0+IHtcbiAgICBjb25zdCBvMSA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7IGsyOiAndGVzdCcgfSwgazI6IHsgazM6ICd0ZXN0JyB9IH0pO1xuICAgIGNvbnN0IG8yID0gT2JqZWN0UHJveHkuY3JlYXRlKHsgazE6IHsgazI6IHsgazM6ICd0ZXN0JyB9IH0gfSwgbzEpO1xuICAgIGNvbnN0IG8zID0gT2JqZWN0UHJveHkuY3JlYXRlKHsgazE6IHsgazI6IHsgazM6IFsndjEnLCAndjInXSB9IH0gfSwgbzIpO1xuICAgIGNvbnN0IG80ID0gT2JqZWN0UHJveHkuY3JlYXRlKHsgazE6IHsgazI6IHsgazM6IHsgazQ6ICd0ZXN0JyB9IH0gfSB9LCBvMyk7XG5cbiAgICBleHBlY3QobzIudG9KU09OKCkpLnRvRXF1YWwoe1xuICAgICAgazE6IHsgazI6IHsgazM6ICd0ZXN0JyB9IH0sXG4gICAgICBrMjogeyBrMzogJ3Rlc3QnIH0sXG4gICAgfSk7XG4gICAgZXhwZWN0KG8zLnRvSlNPTigpKS50b0VxdWFsKHtcbiAgICAgIGsxOiB7IGsyOiB7IGszOiBbJ3YxJywgJ3YyJ10gfSB9LFxuICAgICAgazI6IHsgazM6ICd0ZXN0JyB9LFxuICAgIH0pO1xuICAgIGV4cGVjdChvNC50b0pTT04oKSkudG9FcXVhbCh7XG4gICAgICBrMTogeyBrMjogeyBrMzogeyBrNDogJ3Rlc3QnIH0gfSB9LFxuICAgICAgazI6IHsgazM6ICd0ZXN0JyB9LFxuICAgIH0pO1xuICAgIGV4cGVjdChvMy50b0pTT04oKSkudG9FcXVhbCh7XG4gICAgICBrMTogeyBrMjogeyBrMzogWyd2MScsICd2MiddIH0gfSxcbiAgICAgIGsyOiB7IGszOiAndGVzdCcgfSxcbiAgICB9KTtcbiAgICBleHBlY3QobzIudG9KU09OKCkpLnRvRXF1YWwoe1xuICAgICAgazE6IHsgazI6IHsgazM6ICd0ZXN0JyB9IH0sXG4gICAgICBrMjogeyBrMzogJ3Rlc3QnIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaW5oZXJpdCB2YWx1ZXMnLCAoKSA9PiB7XG4gICAgY29uc3QgbzEgPSBPYmplY3RQcm94eS5jcmVhdGUoeyBrMToge30gfSk7XG4gICAgY29uc3QgbzIgPSBPYmplY3RQcm94eS5jcmVhdGUoeyBrMTogeyBrMjogWyd0ZXN0J10gfSB9LCBvMSk7XG4gICAgY29uc3QgbzMgPSBPYmplY3RQcm94eS5jcmVhdGUoeyBrMToge30gfSwgbzIpO1xuICAgIGNvbnN0IG80ID0gT2JqZWN0UHJveHkuY3JlYXRlKHsgazE6IHsgazI6IG51bGwgfSB9LCBvMyk7XG4gICAgY29uc3QgbzUgPSBPYmplY3RQcm94eS5jcmVhdGUoeyBrMTogeyBrMjogdW5kZWZpbmVkIH0gfSwgbzQpO1xuXG4gICAgZXhwZWN0KG81LmsxLmsyKS50b0JlTnVsbCgpO1xuICAgIGV4cGVjdChvNC5rMS5rMikudG9CZU51bGwoKTtcbiAgICBleHBlY3QobzMuazEuazIpLnRvRXF1YWwoWyd0ZXN0J10pO1xuICAgIGV4cGVjdChvMi5rMS5rMikudG9FcXVhbChbJ3Rlc3QnXSk7XG4gICAgZXhwZWN0KG8xLmsxLmsyKS50b0JlVW5kZWZpbmVkKCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2V0IGEgdmFsdWUgb24gcHJveHkgYXQgcm9vdCcsICgpID0+IHtcbiAgICBjb25zdCBvMSA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7fSB9KTtcbiAgICBjb25zdCBvMiA9IE9iamVjdFByb3h5LmNyZWF0ZSh7fSwgbzEpO1xuXG4gICAgbzIuazEuazIgPSAndGVzdCc7XG4gICAgZXhwZWN0KG8xLmsxKS50b0VxdWFsKHt9KTtcbiAgICBleHBlY3QobzIuazEuazIpLnRvRXF1YWwoJ3Rlc3QnKTtcbiAgICBleHBlY3QobzIuazEpLnRvRXF1YWwoeyBrMjogJ3Rlc3QnIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHNldCBhIHZhbHVlIG9uIHByb3h5IGF0IHN1Ym9iamVjdCcsICgpID0+IHtcbiAgICBjb25zdCBvMSA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7fSB9KTtcbiAgICBjb25zdCBvMiA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7fSB9LCBvMSk7XG5cbiAgICBvMi5rMS5rMiA9ICd0ZXN0JztcbiAgICBleHBlY3QobzEuazEpLnRvRXF1YWwoe30pO1xuICAgIGV4cGVjdChPYmplY3Qua2V5cyhvMikpLnRvRXF1YWwoWydrMSddKTtcbiAgICBleHBlY3QoT2JqZWN0LmtleXMobzIuazEpKS50b0VxdWFsKFsnazInXSk7XG4gICAgZXhwZWN0KG8yLmsxLmsyKS50b0VxdWFsKCd0ZXN0Jyk7XG4gICAgZXhwZWN0KG8yLmsxKS50b0VxdWFsKHsgazI6ICd0ZXN0JyB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBzZXQgYSB2YWx1ZSBvbiBvYmplY3QgYXQgcm9vdCcsICgpID0+IHtcbiAgICBjb25zdCBvMSA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7fSB9KTtcbiAgICBjb25zdCBvMiA9IE9iamVjdFByb3h5LmNyZWF0ZSh7fSwgbzEpO1xuXG4gICAgbzIuazEuazIgPSAndGVzdCc7XG4gICAgZXhwZWN0KE9iamVjdFByb3h5LmdldChvMSkpLnRvRXF1YWwoeyBrMToge30gfSk7XG4gICAgZXhwZWN0KE9iamVjdFByb3h5LmdldChvMikpLnRvRXF1YWwoeyBrMTogeyBrMjogJ3Rlc3QnIH0gfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgc2V0IGEgdmFsdWUgb24gb2JqZWN0IGF0IHN1Ym9iamVjdCcsICgpID0+IHtcbiAgICBjb25zdCBvMSA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7fSB9KTtcbiAgICBjb25zdCBvMiA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7fSB9LCBvMSk7XG5cbiAgICBvMi5rMS5rMiA9ICd0ZXN0JztcbiAgICBleHBlY3QoT2JqZWN0UHJveHkuZ2V0KG8xKSkudG9FcXVhbCh7IGsxOiB7fSB9KTtcbiAgICBleHBlY3QoT2JqZWN0UHJveHkuZ2V0KG8yKSkudG9FcXVhbCh7IGsxOiB7IGsyOiAndGVzdCcgfSB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBnZXQgc3Vib2JqZWN0IHZhbHVlIGZyb20gY2hpbGQnLCAoKSA9PiB7XG4gICAgY29uc3QgbzEgPSBPYmplY3RQcm94eS5jcmVhdGUoeyBrMToge30gfSk7XG4gICAgY29uc3QgbzIgPSBPYmplY3RQcm94eS5jcmVhdGUoeyBrMToge30gfSwgbzEpO1xuXG4gICAgbzIuazEuazIgPSAndGVzdCc7XG4gICAgZXhwZWN0KE9iamVjdFByb3h5LmdldChvMSkpLnRvRXF1YWwoeyBrMToge30gfSk7XG4gICAgbzEuazEuazMgPSAndGVzdDInO1xuICAgIGV4cGVjdChPYmplY3RQcm94eS5nZXQobzEuazEpKS50b0VxdWFsKHsgazM6ICd0ZXN0MicgfSk7XG4gICAgZXhwZWN0KE9iamVjdFByb3h5LmdldChvMi5rMSkpLnRvRXF1YWwoeyBrMjogJ3Rlc3QnIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHBlcmZvcm0gdG9KU09OIG9uIGNoaWxkJywgKCkgPT4ge1xuICAgIGNvbnN0IG8xID0gT2JqZWN0UHJveHkuY3JlYXRlKHsgazE6IHsgazI6ICd0ZXN0JyB9IH0pO1xuICAgIGNvbnN0IG8yID0gT2JqZWN0UHJveHkuY3JlYXRlKHsgazE6IHt9IH0sIG8xKTtcblxuICAgIGV4cGVjdChvMi50b0pTT04oKSkudG9FcXVhbCh7IGsxOiB7IGsyOiAndGVzdCcgfSB9KTtcbiAgICBleHBlY3QobzIuazEudG9KU09OKCkpLnRvRXF1YWwoeyBrMjogJ3Rlc3QnIH0pO1xuICAgIG8yLmsxLmszID0gJ3Rlc3QyJztcbiAgICBleHBlY3QobzIudG9KU09OKCkpLnRvRXF1YWwoeyBrMTogeyBrMjogJ3Rlc3QnLCBrMzogJ3Rlc3QyJyB9IH0pO1xuICAgIGV4cGVjdChvMi5rMS50b0pTT04oKSkudG9FcXVhbCh7IGsyOiAndGVzdCcsIGszOiAndGVzdDInIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRlbGV0ZScsICgpID0+IHtcbiAgICBjb25zdCBvMSA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7fSB9KTtcbiAgICBjb25zdCBvMiA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7IGsyOiBbJ3Rlc3QnXSB9IH0sIG8xKTtcbiAgICBjb25zdCBvMyA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7fSB9LCBvMik7XG4gICAgY29uc3QgbzQgPSBPYmplY3RQcm94eS5jcmVhdGUoeyBrMTogeyBrMjogbnVsbCB9IH0sIG8zKTtcbiAgICBjb25zdCBvNSA9IE9iamVjdFByb3h5LmNyZWF0ZSh7IGsxOiB7IGsyOiB1bmRlZmluZWQgfSB9LCBvNCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFFQUEsUUFBUSxDQUFDLGFBQWEsRUFBRSxNQUFNO0VBQzVCQyxFQUFFLENBQUMsZ0NBQWdDLEVBQUUsTUFBTTtJQUN6QyxNQUFNQyxFQUFFLEdBQUdDLGtCQUFXLENBQUNDLE1BQU0sQ0FBQztNQUFFQyxFQUFFLEVBQUU7UUFBRUMsRUFBRSxFQUFFO01BQU87SUFBRSxDQUFDLENBQUM7SUFFckRDLE1BQU0sQ0FBQ0wsRUFBRSxDQUFDTSxNQUFNLEVBQUUsQ0FBQyxDQUFDQyxPQUFPLENBQUM7TUFBRUosRUFBRSxFQUFFO1FBQUVDLEVBQUUsRUFBRTtNQUFPO0lBQUUsQ0FBQyxDQUFDO0VBQ3JELENBQUMsQ0FBQztFQUVGTCxFQUFFLENBQUMsb0NBQW9DLEVBQUUsTUFBTTtJQUM3QyxNQUFNQyxFQUFFLEdBQUdDLGtCQUFXLENBQUNDLE1BQU0sQ0FBQztNQUFFQyxFQUFFLEVBQUU7UUFBRUMsRUFBRSxFQUFFO01BQU87SUFBRSxDQUFDLENBQUM7SUFDckQsTUFBTUksRUFBRSxHQUFHUCxrQkFBVyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVGLEVBQUUsQ0FBQztJQUVyQ0ssTUFBTSxDQUFDRyxFQUFFLENBQUNGLE1BQU0sRUFBRSxDQUFDLENBQUNDLE9BQU8sQ0FBQztNQUFFSixFQUFFLEVBQUU7UUFBRUMsRUFBRSxFQUFFO01BQU87SUFBRSxDQUFDLENBQUM7RUFDckQsQ0FBQyxDQUFDO0VBRUZMLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxNQUFNO0lBQ25DLE1BQU1DLEVBQUUsR0FBR0Msa0JBQVcsQ0FBQ0MsTUFBTSxDQUFDO01BQUVDLEVBQUUsRUFBRTtRQUFF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